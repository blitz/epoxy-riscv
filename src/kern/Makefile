.PHONY: all
all: epoxy.kern.elf

# You need to set these variables 
KERN_STATE       ?= /does-not-exist
EPOXY_API        ?= /does-not-exist

PREFIX           ?= /usr/local

COMMON_CFLAGS   = -g -flto -I$(EPOXY_API) -MD -Os -fno-common -fomit-frame-pointer
COMMON_CXXFLAGS = -std=c++17 -Wall -Wunused-parameter
COMMON_LDFLAGS  = -g -flto -static

KERN_CFLAGS := $(COMMON_CFLAGS) -ffreestanding -nostdinc -fno-exceptions -fno-unwind-tables
KERN_CXXFLAGS := $(COMMON_CXXFLAGS) $(KERN_CFLAGS) -fno-rtti
KERN_LDFLAGS := $(COMMON_LDFLAGS) -nostdlib

# We call it .o, because that makes the file name transformations easier below.
%.kern.o: %.lds
	$(CPP) $(KERN_CFLAGS) -MT $@ -c -o $@ -P -E -x c $<

%.kern.o: %.S
	$(CC) $(KERN_CFLAGS) -c -o $@ $<

%.kern.o: %.cpp
	$(CC) $(KERN_CXXFLAGS) -c -o $@ $<

%.kern.o: %.c
	$(CC) $(KERN_CFLAGS) -c -o $@ $<

# The kernel linking step expects a linker script as first "object".
%.kern.elf:
	$(CC) $(KERN_CFLAGS) $(KERN_LDFLAGS) -o $@ -T $^

KERN_OBJ := $(addsuffix .kern.o, $(addprefix src/, \
                link asm unpaged_entry paged_entry patched process kernel kobject exc_entry \
                scheduler thread state format_backend memset assert format lshrdi3 plic virq))

src/state.cpp: $(KERN_STATE)/state.cpp
	cp $< $@

include/state.hpp: $(KERN_STATE)/state.hpp
	cp $< $@

include/resources.hpp: $(KERN_STATE)/resources.hpp
	cp $< $@

# These headers are autogenerated.
$(KERN_OBJ): include/state.hpp include/resources.hpp

epoxy.kern.elf: KERN_CXXFLAGS += -Iinclude
epoxy.kern.elf: KERN_CFLAGS += -Iinclude
epoxy.kern.elf: $(KERN_OBJ)

.PHONY: install
install: epoxy.kern.elf
	mkdir -p $(PREFIX)/bin
	install $< $(PREFIX)/bin/kern

-include src/*.d
